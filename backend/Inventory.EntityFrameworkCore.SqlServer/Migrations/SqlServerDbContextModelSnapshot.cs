// <auto-generated />
using System;
using Inventory.EntityFrameworkCore.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Inventory.EntityFrameworkCore.SqlServer.Migrations
{
    [DbContext(typeof(SqlServerDbContext))]
    partial class SqlServerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Inventory.Entity.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("FIN")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FUP")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("UIN")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("UUP")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("UniqueIdentifier")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("AreaId");

                    b.HasIndex("Name", "UniqueIdentifier")
                        .IsUnique()
                        .HasFilter("[UniqueIdentifier] IS NOT NULL");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("Inventory.Entity.Country", b =>
                {
                    b.Property<short>("CountryId")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("CountryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            CountryId = (short)1,
                            Name = "Austria"
                        },
                        new
                        {
                            CountryId = (short)2,
                            Name = "Bélgica"
                        },
                        new
                        {
                            CountryId = (short)3,
                            Name = "Bulgaria"
                        },
                        new
                        {
                            CountryId = (short)4,
                            Name = "Chipre"
                        },
                        new
                        {
                            CountryId = (short)5,
                            Name = "Dinamarca"
                        },
                        new
                        {
                            CountryId = (short)6,
                            Name = "España"
                        },
                        new
                        {
                            CountryId = (short)7,
                            Name = "Finlandia"
                        },
                        new
                        {
                            CountryId = (short)8,
                            Name = "Francia"
                        },
                        new
                        {
                            CountryId = (short)9,
                            Name = "Grecia"
                        },
                        new
                        {
                            CountryId = (short)10,
                            Name = "Hungría"
                        },
                        new
                        {
                            CountryId = (short)11,
                            Name = "Irlanda"
                        },
                        new
                        {
                            CountryId = (short)12,
                            Name = "Italia"
                        },
                        new
                        {
                            CountryId = (short)13,
                            Name = "Luxemburgo"
                        },
                        new
                        {
                            CountryId = (short)14,
                            Name = "Malta"
                        },
                        new
                        {
                            CountryId = (short)15,
                            Name = "Países Bajos"
                        },
                        new
                        {
                            CountryId = (short)16,
                            Name = "Polonia"
                        },
                        new
                        {
                            CountryId = (short)17,
                            Name = "Portugal"
                        },
                        new
                        {
                            CountryId = (short)18,
                            Name = "Reino Unido"
                        },
                        new
                        {
                            CountryId = (short)19,
                            Name = "Alemania"
                        },
                        new
                        {
                            CountryId = (short)20,
                            Name = "Rumanía"
                        },
                        new
                        {
                            CountryId = (short)21,
                            Name = "Suecia"
                        },
                        new
                        {
                            CountryId = (short)22,
                            Name = "Letonia"
                        },
                        new
                        {
                            CountryId = (short)23,
                            Name = "Estonia"
                        },
                        new
                        {
                            CountryId = (short)24,
                            Name = "Lituania"
                        },
                        new
                        {
                            CountryId = (short)25,
                            Name = "República Checa"
                        },
                        new
                        {
                            CountryId = (short)26,
                            Name = "República Eslovaca"
                        },
                        new
                        {
                            CountryId = (short)27,
                            Name = "Croacia"
                        },
                        new
                        {
                            CountryId = (short)28,
                            Name = "Eslovenia"
                        },
                        new
                        {
                            CountryId = (short)29,
                            Name = "Albania"
                        },
                        new
                        {
                            CountryId = (short)30,
                            Name = "Islandia"
                        },
                        new
                        {
                            CountryId = (short)31,
                            Name = "Liechtenstein"
                        },
                        new
                        {
                            CountryId = (short)32,
                            Name = "Mónaco"
                        },
                        new
                        {
                            CountryId = (short)33,
                            Name = "Noruega"
                        },
                        new
                        {
                            CountryId = (short)34,
                            Name = "Andorra"
                        },
                        new
                        {
                            CountryId = (short)35,
                            Name = "San Marino"
                        },
                        new
                        {
                            CountryId = (short)36,
                            Name = "Santa Sede"
                        },
                        new
                        {
                            CountryId = (short)37,
                            Name = "Suiza"
                        },
                        new
                        {
                            CountryId = (short)38,
                            Name = "Ucrania"
                        },
                        new
                        {
                            CountryId = (short)39,
                            Name = "Moldavia"
                        },
                        new
                        {
                            CountryId = (short)40,
                            Name = "Belarús"
                        },
                        new
                        {
                            CountryId = (short)41,
                            Name = "Georgia"
                        },
                        new
                        {
                            CountryId = (short)42,
                            Name = "Bosnia y Herzegovina"
                        },
                        new
                        {
                            CountryId = (short)43,
                            Name = "Armenia"
                        },
                        new
                        {
                            CountryId = (short)44,
                            Name = "Rusia"
                        },
                        new
                        {
                            CountryId = (short)45,
                            Name = "Macedonia"
                        },
                        new
                        {
                            CountryId = (short)46,
                            Name = "Serbia"
                        },
                        new
                        {
                            CountryId = (short)47,
                            Name = "Montenegro"
                        },
                        new
                        {
                            CountryId = (short)48,
                            Name = "Otros países de Europa"
                        },
                        new
                        {
                            CountryId = (short)49,
                            Name = "Burkina Faso"
                        },
                        new
                        {
                            CountryId = (short)50,
                            Name = "Angola"
                        },
                        new
                        {
                            CountryId = (short)51,
                            Name = "Argelia"
                        },
                        new
                        {
                            CountryId = (short)52,
                            Name = "Benin"
                        },
                        new
                        {
                            CountryId = (short)53,
                            Name = "Botswana"
                        },
                        new
                        {
                            CountryId = (short)54,
                            Name = "Burundi"
                        },
                        new
                        {
                            CountryId = (short)55,
                            Name = "Cabo Verde"
                        },
                        new
                        {
                            CountryId = (short)56,
                            Name = "Camerún"
                        },
                        new
                        {
                            CountryId = (short)57,
                            Name = "Comores"
                        },
                        new
                        {
                            CountryId = (short)58,
                            Name = "Congo"
                        },
                        new
                        {
                            CountryId = (short)59,
                            Name = "Costa de Marfil"
                        },
                        new
                        {
                            CountryId = (short)60,
                            Name = "Djibouti"
                        },
                        new
                        {
                            CountryId = (short)61,
                            Name = "Egipto"
                        },
                        new
                        {
                            CountryId = (short)62,
                            Name = "Etiopía"
                        },
                        new
                        {
                            CountryId = (short)63,
                            Name = "Gabón"
                        },
                        new
                        {
                            CountryId = (short)64,
                            Name = "Gambia"
                        },
                        new
                        {
                            CountryId = (short)65,
                            Name = "Ghana"
                        },
                        new
                        {
                            CountryId = (short)66,
                            Name = "Guinea"
                        },
                        new
                        {
                            CountryId = (short)67,
                            Name = "Guinea-Bissau"
                        },
                        new
                        {
                            CountryId = (short)68,
                            Name = "Guinea Ecuatorial"
                        },
                        new
                        {
                            CountryId = (short)69,
                            Name = "Kenia"
                        },
                        new
                        {
                            CountryId = (short)70,
                            Name = "Lesotho"
                        },
                        new
                        {
                            CountryId = (short)71,
                            Name = "Liberia"
                        },
                        new
                        {
                            CountryId = (short)72,
                            Name = "Libia"
                        },
                        new
                        {
                            CountryId = (short)73,
                            Name = "Madagascar"
                        },
                        new
                        {
                            CountryId = (short)74,
                            Name = "Malawi"
                        },
                        new
                        {
                            CountryId = (short)75,
                            Name = "Mali"
                        },
                        new
                        {
                            CountryId = (short)76,
                            Name = "Marruecos"
                        },
                        new
                        {
                            CountryId = (short)77,
                            Name = "Mauricio"
                        },
                        new
                        {
                            CountryId = (short)78,
                            Name = "Mauritania"
                        },
                        new
                        {
                            CountryId = (short)79,
                            Name = "Mozambique"
                        },
                        new
                        {
                            CountryId = (short)80,
                            Name = "Namibia"
                        },
                        new
                        {
                            CountryId = (short)81,
                            Name = "Níger"
                        },
                        new
                        {
                            CountryId = (short)82,
                            Name = "Nigeria"
                        },
                        new
                        {
                            CountryId = (short)83,
                            Name = "República Centroafricana"
                        },
                        new
                        {
                            CountryId = (short)84,
                            Name = "Sudáfrica"
                        },
                        new
                        {
                            CountryId = (short)85,
                            Name = "Ruanda"
                        },
                        new
                        {
                            CountryId = (short)86,
                            Name = "Santo Tomé y Príncipe"
                        },
                        new
                        {
                            CountryId = (short)87,
                            Name = "Senegal"
                        },
                        new
                        {
                            CountryId = (short)88,
                            Name = "Seychelles"
                        },
                        new
                        {
                            CountryId = (short)89,
                            Name = "Sierra Leona"
                        },
                        new
                        {
                            CountryId = (short)90,
                            Name = "Somalia"
                        },
                        new
                        {
                            CountryId = (short)91,
                            Name = "Sudán"
                        },
                        new
                        {
                            CountryId = (short)92,
                            Name = "Swazilandia"
                        },
                        new
                        {
                            CountryId = (short)93,
                            Name = "Tanzania"
                        },
                        new
                        {
                            CountryId = (short)94,
                            Name = "Chad"
                        },
                        new
                        {
                            CountryId = (short)95,
                            Name = "Togo"
                        },
                        new
                        {
                            CountryId = (short)96,
                            Name = "Túnez"
                        },
                        new
                        {
                            CountryId = (short)97,
                            Name = "Uganda"
                        },
                        new
                        {
                            CountryId = (short)98,
                            Name = "República Democrática del Congo"
                        },
                        new
                        {
                            CountryId = (short)99,
                            Name = "Zambia"
                        },
                        new
                        {
                            CountryId = (short)100,
                            Name = "Zimbabwe"
                        },
                        new
                        {
                            CountryId = (short)101,
                            Name = "Eritrea"
                        },
                        new
                        {
                            CountryId = (short)102,
                            Name = "Sudán del Sur"
                        },
                        new
                        {
                            CountryId = (short)103,
                            Name = "Otros países de África"
                        },
                        new
                        {
                            CountryId = (short)104,
                            Name = "Canadá"
                        },
                        new
                        {
                            CountryId = (short)105,
                            Name = "Estados Unidos de América"
                        },
                        new
                        {
                            CountryId = (short)106,
                            Name = "México"
                        },
                        new
                        {
                            CountryId = (short)107,
                            Name = "Antigua y Barbuda"
                        },
                        new
                        {
                            CountryId = (short)108,
                            Name = "Bahamas"
                        },
                        new
                        {
                            CountryId = (short)109,
                            Name = "Barbados"
                        },
                        new
                        {
                            CountryId = (short)110,
                            Name = "Belice"
                        },
                        new
                        {
                            CountryId = (short)111,
                            Name = "Costa Rica"
                        },
                        new
                        {
                            CountryId = (short)112,
                            Name = "Cuba"
                        },
                        new
                        {
                            CountryId = (short)113,
                            Name = "Dominica"
                        },
                        new
                        {
                            CountryId = (short)114,
                            Name = "El Salvador"
                        },
                        new
                        {
                            CountryId = (short)115,
                            Name = "Granada"
                        },
                        new
                        {
                            CountryId = (short)116,
                            Name = "Guatemala"
                        },
                        new
                        {
                            CountryId = (short)117,
                            Name = "Haití"
                        },
                        new
                        {
                            CountryId = (short)118,
                            Name = "Honduras"
                        },
                        new
                        {
                            CountryId = (short)119,
                            Name = "Jamaica"
                        },
                        new
                        {
                            CountryId = (short)120,
                            Name = "Nicaragua"
                        },
                        new
                        {
                            CountryId = (short)121,
                            Name = "Panamá"
                        },
                        new
                        {
                            CountryId = (short)122,
                            Name = "San Vicente y las Granadinas"
                        },
                        new
                        {
                            CountryId = (short)123,
                            Name = "República Dominicana"
                        },
                        new
                        {
                            CountryId = (short)124,
                            Name = "Trinidad y Tobago"
                        },
                        new
                        {
                            CountryId = (short)125,
                            Name = "Santa Lucía"
                        },
                        new
                        {
                            CountryId = (short)126,
                            Name = "San Cristóbal y Nieves"
                        },
                        new
                        {
                            CountryId = (short)127,
                            Name = "Argentina"
                        },
                        new
                        {
                            CountryId = (short)128,
                            Name = "Bolivia"
                        },
                        new
                        {
                            CountryId = (short)129,
                            Name = "Brasil"
                        },
                        new
                        {
                            CountryId = (short)130,
                            Name = "Colombia"
                        },
                        new
                        {
                            CountryId = (short)131,
                            Name = "Chile"
                        },
                        new
                        {
                            CountryId = (short)132,
                            Name = "Ecuador"
                        },
                        new
                        {
                            CountryId = (short)133,
                            Name = "Guyana"
                        },
                        new
                        {
                            CountryId = (short)134,
                            Name = "Paraguay"
                        },
                        new
                        {
                            CountryId = (short)135,
                            Name = "Perú"
                        },
                        new
                        {
                            CountryId = (short)136,
                            Name = "Surinam"
                        },
                        new
                        {
                            CountryId = (short)137,
                            Name = "Uruguay"
                        },
                        new
                        {
                            CountryId = (short)138,
                            Name = "Venezuela"
                        },
                        new
                        {
                            CountryId = (short)139,
                            Name = "Otros países de América"
                        },
                        new
                        {
                            CountryId = (short)140,
                            Name = "Afganistán"
                        },
                        new
                        {
                            CountryId = (short)141,
                            Name = "Arabia Saudí"
                        },
                        new
                        {
                            CountryId = (short)142,
                            Name = "Bahréin"
                        },
                        new
                        {
                            CountryId = (short)143,
                            Name = "Bangladesh"
                        },
                        new
                        {
                            CountryId = (short)144,
                            Name = "Myanmar"
                        },
                        new
                        {
                            CountryId = (short)145,
                            Name = "China"
                        },
                        new
                        {
                            CountryId = (short)146,
                            Name = "Emiratos Árabes Unidos"
                        },
                        new
                        {
                            CountryId = (short)147,
                            Name = "Filipinas"
                        },
                        new
                        {
                            CountryId = (short)148,
                            Name = "India"
                        },
                        new
                        {
                            CountryId = (short)149,
                            Name = "Indonesia"
                        },
                        new
                        {
                            CountryId = (short)150,
                            Name = "Iraq"
                        },
                        new
                        {
                            CountryId = (short)151,
                            Name = "Irán"
                        },
                        new
                        {
                            CountryId = (short)152,
                            Name = "Israel"
                        },
                        new
                        {
                            CountryId = (short)153,
                            Name = "Japón"
                        },
                        new
                        {
                            CountryId = (short)154,
                            Name = "Jordania"
                        },
                        new
                        {
                            CountryId = (short)155,
                            Name = "Camboya"
                        },
                        new
                        {
                            CountryId = (short)156,
                            Name = "Kuwait"
                        },
                        new
                        {
                            CountryId = (short)157,
                            Name = "Laos"
                        },
                        new
                        {
                            CountryId = (short)158,
                            Name = "Líbano"
                        },
                        new
                        {
                            CountryId = (short)159,
                            Name = "Malasia"
                        },
                        new
                        {
                            CountryId = (short)160,
                            Name = "Maldivas"
                        },
                        new
                        {
                            CountryId = (short)161,
                            Name = "Mongolia"
                        },
                        new
                        {
                            CountryId = (short)162,
                            Name = "Nepal"
                        },
                        new
                        {
                            CountryId = (short)163,
                            Name = "Omán"
                        },
                        new
                        {
                            CountryId = (short)164,
                            Name = "Pakistán"
                        },
                        new
                        {
                            CountryId = (short)165,
                            Name = "Qatar"
                        },
                        new
                        {
                            CountryId = (short)166,
                            Name = "Corea"
                        },
                        new
                        {
                            CountryId = (short)167,
                            Name = "Corea del Norte"
                        },
                        new
                        {
                            CountryId = (short)168,
                            Name = "Singapur"
                        },
                        new
                        {
                            CountryId = (short)169,
                            Name = "Siria"
                        },
                        new
                        {
                            CountryId = (short)170,
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            CountryId = (short)171,
                            Name = "Tailandia"
                        },
                        new
                        {
                            CountryId = (short)172,
                            Name = "Turquía"
                        },
                        new
                        {
                            CountryId = (short)173,
                            Name = "Vietnam"
                        },
                        new
                        {
                            CountryId = (short)174,
                            Name = "Brunei"
                        },
                        new
                        {
                            CountryId = (short)175,
                            Name = "Islas Marshall"
                        },
                        new
                        {
                            CountryId = (short)176,
                            Name = "Yemen"
                        },
                        new
                        {
                            CountryId = (short)177,
                            Name = "Azerbaiyán"
                        },
                        new
                        {
                            CountryId = (short)178,
                            Name = "Kazajstán"
                        },
                        new
                        {
                            CountryId = (short)179,
                            Name = "Kirguistán"
                        },
                        new
                        {
                            CountryId = (short)180,
                            Name = "Tayikistán"
                        },
                        new
                        {
                            CountryId = (short)181,
                            Name = "Turkmenistán"
                        },
                        new
                        {
                            CountryId = (short)182,
                            Name = "Uzbekistán"
                        },
                        new
                        {
                            CountryId = (short)183,
                            Name = "Bhután"
                        },
                        new
                        {
                            CountryId = (short)184,
                            Name = "Palestina. Estado Observador, no miembro de Naciones Unidas"
                        },
                        new
                        {
                            CountryId = (short)185,
                            Name = "Otros países de Asia"
                        },
                        new
                        {
                            CountryId = (short)186,
                            Name = "Australia"
                        },
                        new
                        {
                            CountryId = (short)187,
                            Name = "Fiji"
                        },
                        new
                        {
                            CountryId = (short)188,
                            Name = "Nueva Zelanda"
                        },
                        new
                        {
                            CountryId = (short)189,
                            Name = "Papúa Nueva Guinea"
                        },
                        new
                        {
                            CountryId = (short)190,
                            Name = "Islas Salomón"
                        },
                        new
                        {
                            CountryId = (short)191,
                            Name = "Samoa"
                        },
                        new
                        {
                            CountryId = (short)192,
                            Name = "Tonga"
                        },
                        new
                        {
                            CountryId = (short)193,
                            Name = "Vanuatu"
                        },
                        new
                        {
                            CountryId = (short)194,
                            Name = "Micronesia"
                        },
                        new
                        {
                            CountryId = (short)195,
                            Name = "Tuvalu"
                        },
                        new
                        {
                            CountryId = (short)196,
                            Name = "Islas Cook"
                        },
                        new
                        {
                            CountryId = (short)197,
                            Name = "Kiribati"
                        },
                        new
                        {
                            CountryId = (short)198,
                            Name = "Nauru"
                        },
                        new
                        {
                            CountryId = (short)199,
                            Name = "Palaos"
                        },
                        new
                        {
                            CountryId = (short)200,
                            Name = "Timor Oriental"
                        },
                        new
                        {
                            CountryId = (short)201,
                            Name = "Otros países de Oceanía"
                        });
                });

            modelBuilder.Entity("Inventory.Entity.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FIN")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FUP")
                        .HasColumnType("datetime");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<decimal>("MinimumStockCount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("UIN")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("UUP")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("UniqueIdentifier")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("ItemId");

                    b.HasIndex("AreaId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("Name", "UniqueIdentifier")
                        .IsUnique()
                        .HasFilter("[UniqueIdentifier] IS NOT NULL");

                    b.HasIndex("SKU", "UniqueIdentifier")
                        .IsUnique()
                        .HasFilter("[UniqueIdentifier] IS NOT NULL");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("Inventory.Entity.ItemLocation", b =>
                {
                    b.Property<int>("ItemLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("ItemLocationId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ItemId", "LocationId")
                        .IsUnique();

                    b.ToTable("ItemLocation");
                });

            modelBuilder.Entity("Inventory.Entity.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<short?>("CountryId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("FIN")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FUP")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<short?>("StateId")
                        .HasColumnType("smallint");

                    b.Property<string>("UIN")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("UUP")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("UniqueIdentifier")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("LocationId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.HasIndex("Name", "UniqueIdentifier")
                        .IsUnique()
                        .HasFilter("[UniqueIdentifier] IS NOT NULL");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Inventory.Entity.Manufacturer", b =>
                {
                    b.Property<int>("ManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("FIN")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FUP")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("UIN")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("UUP")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("UniqueIdentifier")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("ManufacturerId");

                    b.HasIndex("Name", "UniqueIdentifier")
                        .IsUnique()
                        .HasFilter("[UniqueIdentifier] IS NOT NULL");

                    b.ToTable("Manufacturer");
                });

            modelBuilder.Entity("Inventory.Entity.State", b =>
                {
                    b.Property<short>("StateId")
                        .HasColumnType("smallint");

                    b.Property<short>("CountryId")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("State");

                    b.HasData(
                        new
                        {
                            StateId = (short)1,
                            CountryId = (short)123,
                            Name = "Azua"
                        },
                        new
                        {
                            StateId = (short)2,
                            CountryId = (short)123,
                            Name = "Baoruco"
                        },
                        new
                        {
                            StateId = (short)3,
                            CountryId = (short)123,
                            Name = "Barahona"
                        },
                        new
                        {
                            StateId = (short)4,
                            CountryId = (short)123,
                            Name = "Dajabon"
                        },
                        new
                        {
                            StateId = (short)5,
                            CountryId = (short)123,
                            Name = "Distrito nacional"
                        },
                        new
                        {
                            StateId = (short)6,
                            CountryId = (short)123,
                            Name = "Duarte"
                        },
                        new
                        {
                            StateId = (short)7,
                            CountryId = (short)123,
                            Name = "El seibo"
                        },
                        new
                        {
                            StateId = (short)8,
                            CountryId = (short)123,
                            Name = "Elias piña"
                        },
                        new
                        {
                            StateId = (short)9,
                            CountryId = (short)123,
                            Name = "Espaillat"
                        },
                        new
                        {
                            StateId = (short)10,
                            CountryId = (short)123,
                            Name = "Hato mayor"
                        },
                        new
                        {
                            StateId = (short)11,
                            CountryId = (short)123,
                            Name = "Hermanas mirabal"
                        },
                        new
                        {
                            StateId = (short)12,
                            CountryId = (short)123,
                            Name = "Independencia"
                        },
                        new
                        {
                            StateId = (short)13,
                            CountryId = (short)123,
                            Name = "La altagracia"
                        },
                        new
                        {
                            StateId = (short)14,
                            CountryId = (short)123,
                            Name = "La romana"
                        },
                        new
                        {
                            StateId = (short)15,
                            CountryId = (short)123,
                            Name = "La vega"
                        },
                        new
                        {
                            StateId = (short)16,
                            CountryId = (short)123,
                            Name = "Maria trinidad sanchez"
                        },
                        new
                        {
                            StateId = (short)17,
                            CountryId = (short)123,
                            Name = "Monseñor nouel"
                        },
                        new
                        {
                            StateId = (short)18,
                            CountryId = (short)123,
                            Name = "Monte cristi"
                        },
                        new
                        {
                            StateId = (short)19,
                            CountryId = (short)123,
                            Name = "Monte plata"
                        },
                        new
                        {
                            StateId = (short)20,
                            CountryId = (short)123,
                            Name = "Pedernales"
                        },
                        new
                        {
                            StateId = (short)21,
                            CountryId = (short)123,
                            Name = "Peravia"
                        },
                        new
                        {
                            StateId = (short)22,
                            CountryId = (short)123,
                            Name = "Puerto plata"
                        },
                        new
                        {
                            StateId = (short)23,
                            CountryId = (short)123,
                            Name = "Samana"
                        },
                        new
                        {
                            StateId = (short)24,
                            CountryId = (short)123,
                            Name = "San cristobal"
                        },
                        new
                        {
                            StateId = (short)25,
                            CountryId = (short)123,
                            Name = "San jose de ocoa"
                        },
                        new
                        {
                            StateId = (short)26,
                            CountryId = (short)123,
                            Name = "San juan"
                        },
                        new
                        {
                            StateId = (short)27,
                            CountryId = (short)123,
                            Name = "San pedro de macoris"
                        },
                        new
                        {
                            StateId = (short)28,
                            CountryId = (short)123,
                            Name = "Sanchez ramirez"
                        },
                        new
                        {
                            StateId = (short)29,
                            CountryId = (short)123,
                            Name = "Santiago"
                        },
                        new
                        {
                            StateId = (short)30,
                            CountryId = (short)123,
                            Name = "Santiago rodriguez"
                        },
                        new
                        {
                            StateId = (short)31,
                            CountryId = (short)123,
                            Name = "Santo domingo"
                        },
                        new
                        {
                            StateId = (short)32,
                            CountryId = (short)123,
                            Name = "Valverde"
                        });
                });

            modelBuilder.Entity("Inventory.Entity.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AverageCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("FIN")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FUP")
                        .HasColumnType("datetime");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UIN")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("UUP")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("UniqueIdentifier")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("UnitSale")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("TransactionId");

                    b.HasIndex("ItemId");

                    b.HasIndex("LocationId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Inventory.Entity.TransactionType", b =>
                {
                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("Hide")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("TransactionTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TransactionType");

                    b.HasData(
                        new
                        {
                            TransactionTypeId = 1,
                            Hide = false,
                            Name = "Nuevo stock"
                        },
                        new
                        {
                            TransactionTypeId = 3,
                            Hide = false,
                            Name = "Devolución - inutilizable"
                        },
                        new
                        {
                            TransactionTypeId = 2,
                            Hide = false,
                            Name = "Retorno - utilizable"
                        },
                        new
                        {
                            TransactionTypeId = 5,
                            Hide = true,
                            Name = "Transferencia entrante"
                        },
                        new
                        {
                            TransactionTypeId = 4,
                            Hide = true,
                            Name = "Transferencia saliente"
                        },
                        new
                        {
                            TransactionTypeId = 6,
                            Hide = true,
                            Name = "Venta al cliente"
                        },
                        new
                        {
                            TransactionTypeId = 7,
                            Hide = true,
                            Name = "Stock dañado"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Security.Core.Entities.IdentityForm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AspNetForms");
                });

            modelBuilder.Entity("Security.Core.Entities.IdentityMenu", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<double>("Orden")
                        .HasColumnType("float");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<short>("TipoMenu")
                        .HasColumnType("smallint");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("Id", "ParentId")
                        .IsUnique()
                        .HasFilter("[ParentId] IS NOT NULL");

                    b.ToTable("AspNetMenus");

                    b.HasData(
                        new
                        {
                            Id = "d7929eda-8e48-4383-8d9d-722c06969169",
                            Icon = "fa fa-plus",
                            Name = "Artículos",
                            Orden = 4.0,
                            TipoMenu = (short)1,
                            Url = "/items"
                        },
                        new
                        {
                            Id = "2e4a8010-7a3a-444e-b8c1-6a9a934e32e6",
                            Icon = "icon-star",
                            Name = "Areas",
                            Orden = 2.0,
                            TipoMenu = (short)1,
                            Url = "/areas"
                        },
                        new
                        {
                            Id = "cfd4b10d-3bdd-4eca-a10f-44829a21eca2",
                            Icon = "fa fa-map-marker",
                            Name = "Almacenes",
                            Orden = 1.0,
                            TipoMenu = (short)1,
                            Url = "/locations"
                        },
                        new
                        {
                            Id = "0cc1ea20-6f37-4e62-ae66-c4937f1d02db",
                            Icon = "fa fa-industry",
                            Name = "Fabricantes",
                            Orden = 3.0,
                            TipoMenu = (short)1,
                            Url = "/manufacturers"
                        },
                        new
                        {
                            Id = "dd20b5b6-472f-49c4-8267-74b0440f28af",
                            Icon = "fa fa-print",
                            Name = "Reportes",
                            Orden = 5.0,
                            TipoMenu = (short)1,
                            Url = "/reports"
                        });
                });

            modelBuilder.Entity("Security.Core.Entities.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "fd162655-2107-48a9-a302-6d5cf7d6d399",
                            ConcurrencyStamp = "7b826b78-ec2c-4b93-9bba-7a0740d9baf1",
                            Description = "Server administrator role",
                            Name = "sa",
                            NormalizedName = "SA"
                        },
                        new
                        {
                            Id = "4fc0e346-7829-4ee6-b1eb-7a5b84f4996a",
                            ConcurrencyStamp = "4c6a4a31-c688-4189-9fb5-4181cb1b2464",
                            Description = "Standard role",
                            Name = "default",
                            NormalizedName = "DEFAULT"
                        });
                });

            modelBuilder.Entity("Security.Core.Entities.IdentityRoleForm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<short>("Action")
                        .HasColumnType("smallint");

                    b.Property<string>("FormId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("RoleId", "FormId")
                        .IsUnique();

                    b.ToTable("AspNetRoleForms");
                });

            modelBuilder.Entity("Security.Core.Entities.IdentityRoleMenu", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("MenuId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId", "MenuId")
                        .IsUnique();

                    b.ToTable("AspNetRoleMenus");
                });

            modelBuilder.Entity("Security.Core.Entities.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("ChangePassword")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogon")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Security.Core.Entities.IdentityUserForm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<short>("Action")
                        .HasColumnType("smallint");

                    b.Property<string>("FormId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("UserId", "FormId")
                        .IsUnique();

                    b.ToTable("AspNetUserForms");
                });

            modelBuilder.Entity("Security.Core.Entities.IdentityUserMenu", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("MenuId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("UserId", "MenuId")
                        .IsUnique();

                    b.ToTable("AspNetUserMenus");
                });

            modelBuilder.Entity("Inventory.Entity.Item", b =>
                {
                    b.HasOne("Inventory.Entity.Area", "Area")
                        .WithMany("Items")
                        .HasForeignKey("AreaId");

                    b.HasOne("Inventory.Entity.Manufacturer", "Manufacturer")
                        .WithMany("Items")
                        .HasForeignKey("ManufacturerId");
                });

            modelBuilder.Entity("Inventory.Entity.ItemLocation", b =>
                {
                    b.HasOne("Inventory.Entity.Item", "Item")
                        .WithMany("ItemLocation")
                        .HasForeignKey("ItemId")
                        .IsRequired();

                    b.HasOne("Inventory.Entity.Location", "Location")
                        .WithMany("ItemLocation")
                        .HasForeignKey("LocationId")
                        .IsRequired();
                });

            modelBuilder.Entity("Inventory.Entity.Location", b =>
                {
                    b.HasOne("Inventory.Entity.Country", "Country")
                        .WithMany("Locations")
                        .HasForeignKey("CountryId");

                    b.HasOne("Inventory.Entity.State", "State")
                        .WithMany("Locations")
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("Inventory.Entity.State", b =>
                {
                    b.HasOne("Inventory.Entity.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .IsRequired();
                });

            modelBuilder.Entity("Inventory.Entity.Transaction", b =>
                {
                    b.HasOne("Inventory.Entity.Item", "Item")
                        .WithMany("Transactions")
                        .HasForeignKey("ItemId")
                        .IsRequired();

                    b.HasOne("Inventory.Entity.Location", "Location")
                        .WithMany("Transactions")
                        .HasForeignKey("LocationId")
                        .IsRequired();

                    b.HasOne("Inventory.Entity.TransactionType", "TransactionType")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionTypeId")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Security.Core.Entities.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Security.Core.Entities.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Security.Core.Entities.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Security.Core.Entities.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired();

                    b.HasOne("Security.Core.Entities.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Security.Core.Entities.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Security.Core.Entities.IdentityRoleForm", b =>
                {
                    b.HasOne("Security.Core.Entities.IdentityForm", "Form")
                        .WithMany("RoleForms")
                        .HasForeignKey("FormId")
                        .IsRequired();

                    b.HasOne("Security.Core.Entities.IdentityRole", "Role")
                        .WithMany("RoleForms")
                        .HasForeignKey("RoleId")
                        .IsRequired();
                });

            modelBuilder.Entity("Security.Core.Entities.IdentityRoleMenu", b =>
                {
                    b.HasOne("Security.Core.Entities.IdentityMenu", "Menu")
                        .WithMany("MenuRoles")
                        .HasForeignKey("MenuId")
                        .IsRequired();

                    b.HasOne("Security.Core.Entities.IdentityRole", "Role")
                        .WithMany("MenuRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired();
                });

            modelBuilder.Entity("Security.Core.Entities.IdentityUserForm", b =>
                {
                    b.HasOne("Security.Core.Entities.IdentityForm", "Form")
                        .WithMany("UserForms")
                        .HasForeignKey("FormId")
                        .IsRequired();

                    b.HasOne("Security.Core.Entities.IdentityUser", "User")
                        .WithMany("UserForms")
                        .HasForeignKey("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Security.Core.Entities.IdentityUserMenu", b =>
                {
                    b.HasOne("Security.Core.Entities.IdentityMenu", "Menu")
                        .WithMany("MenuUsers")
                        .HasForeignKey("MenuId")
                        .IsRequired();

                    b.HasOne("Security.Core.Entities.IdentityUser", "User")
                        .WithMany("MenuUsers")
                        .HasForeignKey("UserId")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
